{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"A GameMaker Studio 2.3+ extension that adds a customizable debug console to your game. Author and Collaborators Originally created by @DAndrewBox . Special Thanks YoYo Games for creating GameMaker. \u00c6nigma For creating the visitor pixel font used on this project. Table of Contents Contributing License Versioning & Compatibility Getting Started Contributing If you want to contribute to this project, you can do so by forking this repository, finding the addecuate branch and submitting a pull request. You can also submit an issue if you find a bug or want to suggest a new feature, I'm open to add new features to this extension as long as I can see a use for it. License This project is licensed under the MIT License. See the LICENSE file for more details. Versioning and Compatibility Any of the releases of this extension are compatible with GameMaker Studio from versions 2.3 to 2022.11 (Including 2022.x LTS). But the table below shows the compatibility of each release. \u2705: Fully compatible. (*: Recommended for this version.) \u26a0\ufe0f: Compatible but could have some compatibility issues with the new features of the version. \u274c: Not compatible. GameMaker Version GM-EzConsole v1.0 GM-EzConsole v1.1 GM-EzConsole v1.2 Studio 1.4.x \u274c \u274c \u274c Studio 2 - 2.2 \u274c \u274c \u274c Studio 2.3.x \u2705* \u274c \u274c 2022.1 - 2022.9 \u2705* \u274c \u274c 2022.x LTS \u2705* \u26a0\ufe0f \u274c 2022.11 \u26a0\ufe0f \u2705 \u2705* 2023.1 \u26a0\ufe0f \u2705 \u2705*","title":"Home"},{"location":"#author-and-collaborators","text":"Originally created by @DAndrewBox .","title":"Author and Collaborators"},{"location":"#special-thanks","text":"YoYo Games for creating GameMaker. \u00c6nigma For creating the visitor pixel font used on this project.","title":"Special Thanks"},{"location":"#table-of-contents","text":"Contributing License Versioning & Compatibility Getting Started","title":"Table of Contents"},{"location":"#contributing","text":"If you want to contribute to this project, you can do so by forking this repository, finding the addecuate branch and submitting a pull request. You can also submit an issue if you find a bug or want to suggest a new feature, I'm open to add new features to this extension as long as I can see a use for it.","title":"Contributing"},{"location":"#license","text":"This project is licensed under the MIT License. See the LICENSE file for more details.","title":"License"},{"location":"#versioning-and-compatibility","text":"Any of the releases of this extension are compatible with GameMaker Studio from versions 2.3 to 2022.11 (Including 2022.x LTS). But the table below shows the compatibility of each release. \u2705: Fully compatible. (*: Recommended for this version.) \u26a0\ufe0f: Compatible but could have some compatibility issues with the new features of the version. \u274c: Not compatible. GameMaker Version GM-EzConsole v1.0 GM-EzConsole v1.1 GM-EzConsole v1.2 Studio 1.4.x \u274c \u274c \u274c Studio 2 - 2.2 \u274c \u274c \u274c Studio 2.3.x \u2705* \u274c \u274c 2022.1 - 2022.9 \u2705* \u274c \u274c 2022.x LTS \u2705* \u26a0\ufe0f \u274c 2022.11 \u26a0\ufe0f \u2705 \u2705* 2023.1 \u26a0\ufe0f \u2705 \u2705*","title":"Versioning and Compatibility"},{"location":"commands/","text":"Import base commands By default, the extension comes with a set of base commands that you can use to test the extension. The commands are imported automatically when the extension is imported into your project and are saved in the default_commands.json file. If you want to disable the import of the base commands, you can do so by removing \"default_commands.json\" from the _files_to_load array on the ezConsole_init script and deleting the default_commands.json file. The following table shows the list of base commands: Command Description Arguments Required arguments help Show the list of commands. [command] [false] message Shows a message on screen and pauses the game. [message] [true] fullscreen Toggles fullscreen mode. [0/1] [true] game Choose to end or restart the game. [end/reset] [true] create Create an object. [object_name, x, y, depth] [true, false, false, false] instances Show the list of active instances. [object_name] [true] clear Clear the console. set Set a variable on an instance. [instance_id, variable_name, value] [true, true] get Gets a variable or all variables from an instance. [instance_ide, variable_name] [false] delete Delete an instance. [instance_id] [true] fps Shows or toggles the current FPS. [0/1] [false] overlay Shows or hides the debug overlay. [0/1] [false] Custom commands The commands should have this format: { \"name\": \"command_name\", \"short\": \"command_short_name\", \"desc\": \"Short description of the command\", \"args\": [\"argument_name\"], \"args_req\": [\"true or false\"], \"args_desc\": [\"Short description of the argument in the same index\"], \"callback\": \"Function to call when the command is executed\" } You can see an example of a command on the default_commands.json file. The following table shows the meaning of each field: Field Description Required name The name of the command. Yes short The short name of the command. No (use \"-\" to disable) desc The description of the command. No args The arguments of the command. No args_req False if the argument is optional, true otherwise. No (Yes if there's at least 1 argument) args_desc The description of the arguments. No (Yes if there's at least 1 argument) callback The function to call when the command is executed. Yes Import custom commands from file If you want to import custom commands from a file, you can do so by following these steps: Create a new file with the .json extension. Add the commands you want to import to the file. Add the filename to the _files_to_load array on the ezConsole_init script. Create a callback function for each command you want to import on the ezConsole_custom_commands script. Run your project and press F1 to open the console. Type help to see the list of commands. You should see the commands you imported. If you don't, check if you followed the steps correctly and the file is in the correct folder. Import custom commands from code If you want to import custom commands from code, you can do so by following these steps: Adding commands using the custom commands script: (Recommended) Open the ezConsole_custom_commands script. Create the callback functions for the commands you want to import. At the end of the file, use the console_add_command function to add the commands you want to import. This function has the following format: console_add_command(command_struct); where command_struct is a struct with Custom Commands fields. Run your project and press F1 to open the console. Type help to see the list of commands. This is an example of how to use the console_add_command function: console_add_command({ name: \"fps\", short: \"-\", desc: \"Show fps\", args: [\"flag\"], args_req: [true], args_desc: [\"Boolean flag to enable or disable the fps counter.\"], callback: \"show_fps\", }); Now you should see the commands you imported. If you don't, check if you followed the steps correctly. Adding commands directly to the global array: (Not recommended) As a last resort, you can try to add the commands directly to the global array. This is not recommended, but it's possible. Open the ezConsole_custom_init script. Add the commands you want to import to the global.__ezConsole_commands array. Create a callback function for each command you want to import on the ezConsole_custom_commands script. Run your project and press F1 to open the console. Type help to see the list of commands. This is an example of how to add a command to the global array: global.__ezConsole_commands = [ { name: \"COMMAND\", short: \"short\", desc: \"DESCRIPTION\", args: [\"ARGUMENT\"], args_req: [true], args_desc: [\"VALUE\"], callback: \"console_write_log\", }, { name: \"fps\", short: \"-\", desc: \"Show fps\", args: [\"flag\"], args_req: [true], args_desc: [\"Boolean flag to enable or disable the fps counter.\"], callback: \"show_fps\", }, ... ];","title":"Commands"},{"location":"commands/#import-base-commands","text":"By default, the extension comes with a set of base commands that you can use to test the extension. The commands are imported automatically when the extension is imported into your project and are saved in the default_commands.json file. If you want to disable the import of the base commands, you can do so by removing \"default_commands.json\" from the _files_to_load array on the ezConsole_init script and deleting the default_commands.json file. The following table shows the list of base commands: Command Description Arguments Required arguments help Show the list of commands. [command] [false] message Shows a message on screen and pauses the game. [message] [true] fullscreen Toggles fullscreen mode. [0/1] [true] game Choose to end or restart the game. [end/reset] [true] create Create an object. [object_name, x, y, depth] [true, false, false, false] instances Show the list of active instances. [object_name] [true] clear Clear the console. set Set a variable on an instance. [instance_id, variable_name, value] [true, true] get Gets a variable or all variables from an instance. [instance_ide, variable_name] [false] delete Delete an instance. [instance_id] [true] fps Shows or toggles the current FPS. [0/1] [false] overlay Shows or hides the debug overlay. [0/1] [false]","title":"Import base commands"},{"location":"commands/#custom-commands","text":"The commands should have this format: { \"name\": \"command_name\", \"short\": \"command_short_name\", \"desc\": \"Short description of the command\", \"args\": [\"argument_name\"], \"args_req\": [\"true or false\"], \"args_desc\": [\"Short description of the argument in the same index\"], \"callback\": \"Function to call when the command is executed\" } You can see an example of a command on the default_commands.json file. The following table shows the meaning of each field: Field Description Required name The name of the command. Yes short The short name of the command. No (use \"-\" to disable) desc The description of the command. No args The arguments of the command. No args_req False if the argument is optional, true otherwise. No (Yes if there's at least 1 argument) args_desc The description of the arguments. No (Yes if there's at least 1 argument) callback The function to call when the command is executed. Yes","title":"Custom commands"},{"location":"commands/#import-custom-commands-from-file","text":"If you want to import custom commands from a file, you can do so by following these steps: Create a new file with the .json extension. Add the commands you want to import to the file. Add the filename to the _files_to_load array on the ezConsole_init script. Create a callback function for each command you want to import on the ezConsole_custom_commands script. Run your project and press F1 to open the console. Type help to see the list of commands. You should see the commands you imported. If you don't, check if you followed the steps correctly and the file is in the correct folder.","title":"Import custom commands from file"},{"location":"commands/#import-custom-commands-from-code","text":"If you want to import custom commands from code, you can do so by following these steps:","title":"Import custom commands from code"},{"location":"commands/#adding-commands-using-the-custom-commands-script-recommended","text":"Open the ezConsole_custom_commands script. Create the callback functions for the commands you want to import. At the end of the file, use the console_add_command function to add the commands you want to import. This function has the following format: console_add_command(command_struct); where command_struct is a struct with Custom Commands fields. Run your project and press F1 to open the console. Type help to see the list of commands. This is an example of how to use the console_add_command function: console_add_command({ name: \"fps\", short: \"-\", desc: \"Show fps\", args: [\"flag\"], args_req: [true], args_desc: [\"Boolean flag to enable or disable the fps counter.\"], callback: \"show_fps\", }); Now you should see the commands you imported. If you don't, check if you followed the steps correctly.","title":"Adding commands using the custom commands script: (Recommended)"},{"location":"commands/#adding-commands-directly-to-the-global-array-not-recommended","text":"As a last resort, you can try to add the commands directly to the global array. This is not recommended, but it's possible. Open the ezConsole_custom_init script. Add the commands you want to import to the global.__ezConsole_commands array. Create a callback function for each command you want to import on the ezConsole_custom_commands script. Run your project and press F1 to open the console. Type help to see the list of commands. This is an example of how to add a command to the global array: global.__ezConsole_commands = [ { name: \"COMMAND\", short: \"short\", desc: \"DESCRIPTION\", args: [\"ARGUMENT\"], args_req: [true], args_desc: [\"VALUE\"], callback: \"console_write_log\", }, { name: \"fps\", short: \"-\", desc: \"Show fps\", args: [\"flag\"], args_req: [true], args_desc: [\"Boolean flag to enable or disable the fps counter.\"], callback: \"show_fps\", }, ... ];","title":"Adding commands directly to the global array: (Not recommended)"},{"location":"customize/","text":"Using a theme Since version 1.2.0, the console supports themes. You can use a theme by changing the value of the global.__ezConsole_skins_selected variable in the ezConsole_init script for the name of the theme you want to use. The theme should be in the GM-EzConsole folder on your Included Files . The following themes are available by default: default-dark default-light Create your own theme Since version 1.2.0, you can create your own theme. To do so, you can create a new file in the GM-EzConsole folder with the .skin extension. The theme format is very simple, it is just a JSON file with the following structure: { \"name\": \"\", \"author\": \"\", \"width\": 0, \"height\": 0, \"anchor\": 0, \"bg_color\": \"\", \"bg_alpha\": 0, \"text_font\": \"\", \"text_font_xoff\": 0, \"text_font_yoff\": 0, \"text_color_common\": \"\", \"text_color_error\": \"\", \"text_color_warning\": \"\", \"text_color_info\": \"\", \"text_alpha\": 0, \"text_blink_char\": \"\", \"text_blink_rate\": 0, \"text_start_char\": \"\", \"bar_height\": 0, \"bar_color\": \"\", \"bar_color_highlight\": \"\", \"bar_xpad\": 0, \"bar_ypad\": 0, \"blur_flag\": false, \"blur_amount\": 0, \"screenfill_flag\": false, \"screenfill_color\": \"\", \"screenfill_alpha\": 0, \"typeahead_flag\": false, \"typeahead_max_elements\": 0, \"suggestions_flag\": false, \"nav_scroll_speed\": 0 } The following table describes the meaning of each field: Field Type Description name string The name of the theme. author string The author of the theme. width number The width of the console. (If you use a size from 0 to 1 it will use a x% of the window. Ex: 0.50 = 50% of window's width) height number The height of the console. (If you use a size from 0 to 1 it will use a x% of the window. Ex: 0.50 = 50% of window's height) anchor number The anchor of the console. (0: Top-Left, 1: Top-Right, 2: Bottom-Left, 3: Bottom-right ) bg_color string The hexadecimal background color of the console. (ex: \"#FFFFFF\") bg_alpha number The alpha of the background color of the console. text_font string The font of the text in the console. This font should exist on your project with the same name. text_font_xoff number The horizontal offset of the text in the console. text_font_yoff number The vertical offset of the text in the console. text_color_common string The hexadecimal color of the text in the console. (ex: \"#FFFFFF\") text_color_error string The hexadecimal color of the error text in the console. (ex: \"#FF0000\") text_color_warning string The hexadecimal color of the warning text in the console. (ex: \"#FFFF00\") text_color_info string The hexadecimal color of the info text in the console. (ex: \"#00FF00\") text_alpha number The alpha of the text in the console. text_blink_char string The character that will blink when the console is waiting for input. text_blink_rate number The rate of the blinking character will appear every second. text_start_char string The character that will be shown at the start of the console. bar_height number The height of the bar that shows the current command. bar_color string The hexadecimal color of the bar that shows the current command. (ex: \"#FFFFFF\") bar_color_highlight string The hexadecimal color of the bar that shows the current command when the user selects a typeahead command. (ex: \"#FFFFFF\") bar_xpad number The horizontal padding of the bar that shows the current command. bar_ypad number The vertical padding of the bar that shows the current command. blur_flag bool If true, the console will have a blur effect behind. blur_amount number The amount of the blur effect. (From 0 to 1 recommended.) screenfill_flag bool If true, the console will fill the screen with a color. screenfill_color string The hexadecimal color of the screenfill. (ex: \"#FFFFFF\") screenfill_alpha number The alpha of the screenfill. typeahead_flag bool If true, the console will show a typeahead list of commands. typeahead_max_elements number The maximum number of elements that will be shown in the typeahead list. suggestions_flag bool If true, the console will show a list of suggestions when the user start typing a command. nav_scroll_speed number The speed of the navigation in the console. (from 0.1 to 2 recommended) Change console styles (Without Themes) This console is very customizable using themes, but if you don't want to use themes, you can change the style of the console by changing the values of the variables in the create event of the __ezConsole__ object. The following variables are responsible for the style of the console: Variable Description console_width The width in pixels of the console. console_height The height in pixels of the console. console_bg_color The background color of the console. console_bg_alpha The background alpha of the console. console_text_font The font of the text in the console. console_text_font_xoff The x offset of the text in the console. console_text_font_yoff The y offset of the text in the console. console_text_alpha The alpha of the text in the console. console_text_blink_char The character that will blink when the console is waiting for input. console_bar_height The height in pixels of the bar that shows the current command. console_bar_color The color of the bar that shows the current command. console_bar_color_highlight The color of the bar that shows the current command when the user selects a typeahead command. console_bar_max_chars The maximum number of characters that can be shown in the bar. console_log_xpad The horizontal padding of the log. console_log_ypad The vertical padding of the log. console_blur_flag If true, the console will have a blur effect behind. console_blur_amount The amount of blur that will be applied to the game behind the console. console_screenfill_flag If true, the console will fill the screen with a color. console_screenfill_color The color of the screenfill. console_screenfill_alpha The alpha of the screenfill. console_typeahead_flag If true, the console will show a typeahead list of commands. console_typeahead_elements_max The maximum number of elements that will be shown in the typeahead list. console_suggestions_flag If true, the console will show a list of suggestions when the user start typing a command. I do not recommend changing style variables that are not listed here, because they are used by the console to work properly. Change key bindings In the create event of the __ezConsole__ object you can change the key bindings of the console by changing the values of the variables: Variable Description Default console_key_toggle The key that will toggle the console visible. vk_f1 console_key_nav_up The key that will move the cursor up in the command history or the typeahead list of commands. vk_up console_key_nav_down The key that will move the cursor down in the command history or the typeahead list of commands. vk_down console_key_nav_left The key that will move the cursor left in the command. vk_left console_key_nav_right The key that will move the cursor right in the command. vk_right The default key binding to autocomplete suggestions or typeahead commands is vk_tab and cannot be changed easily. Sorry :( Change console's behavior In the create event of the __ezConsole__ object you can change the behavior of the console at almost any event by changing the values of the variables: Variable Description console_callback_on_open A function that will be called when the console is opened. console_callback_on_close A function that will be called when the console is closed. console_callback_on_log A function that will be called when a log is added to the console. console_callback_on_destroy A function that will be called when the console is destroyed. console_callback_on_game_end A function that will be called when the game ends.","title":"Customization"},{"location":"customize/#using-a-theme","text":"Since version 1.2.0, the console supports themes. You can use a theme by changing the value of the global.__ezConsole_skins_selected variable in the ezConsole_init script for the name of the theme you want to use. The theme should be in the GM-EzConsole folder on your Included Files . The following themes are available by default: default-dark default-light","title":"Using a theme"},{"location":"customize/#create-your-own-theme","text":"Since version 1.2.0, you can create your own theme. To do so, you can create a new file in the GM-EzConsole folder with the .skin extension. The theme format is very simple, it is just a JSON file with the following structure: { \"name\": \"\", \"author\": \"\", \"width\": 0, \"height\": 0, \"anchor\": 0, \"bg_color\": \"\", \"bg_alpha\": 0, \"text_font\": \"\", \"text_font_xoff\": 0, \"text_font_yoff\": 0, \"text_color_common\": \"\", \"text_color_error\": \"\", \"text_color_warning\": \"\", \"text_color_info\": \"\", \"text_alpha\": 0, \"text_blink_char\": \"\", \"text_blink_rate\": 0, \"text_start_char\": \"\", \"bar_height\": 0, \"bar_color\": \"\", \"bar_color_highlight\": \"\", \"bar_xpad\": 0, \"bar_ypad\": 0, \"blur_flag\": false, \"blur_amount\": 0, \"screenfill_flag\": false, \"screenfill_color\": \"\", \"screenfill_alpha\": 0, \"typeahead_flag\": false, \"typeahead_max_elements\": 0, \"suggestions_flag\": false, \"nav_scroll_speed\": 0 } The following table describes the meaning of each field: Field Type Description name string The name of the theme. author string The author of the theme. width number The width of the console. (If you use a size from 0 to 1 it will use a x% of the window. Ex: 0.50 = 50% of window's width) height number The height of the console. (If you use a size from 0 to 1 it will use a x% of the window. Ex: 0.50 = 50% of window's height) anchor number The anchor of the console. (0: Top-Left, 1: Top-Right, 2: Bottom-Left, 3: Bottom-right ) bg_color string The hexadecimal background color of the console. (ex: \"#FFFFFF\") bg_alpha number The alpha of the background color of the console. text_font string The font of the text in the console. This font should exist on your project with the same name. text_font_xoff number The horizontal offset of the text in the console. text_font_yoff number The vertical offset of the text in the console. text_color_common string The hexadecimal color of the text in the console. (ex: \"#FFFFFF\") text_color_error string The hexadecimal color of the error text in the console. (ex: \"#FF0000\") text_color_warning string The hexadecimal color of the warning text in the console. (ex: \"#FFFF00\") text_color_info string The hexadecimal color of the info text in the console. (ex: \"#00FF00\") text_alpha number The alpha of the text in the console. text_blink_char string The character that will blink when the console is waiting for input. text_blink_rate number The rate of the blinking character will appear every second. text_start_char string The character that will be shown at the start of the console. bar_height number The height of the bar that shows the current command. bar_color string The hexadecimal color of the bar that shows the current command. (ex: \"#FFFFFF\") bar_color_highlight string The hexadecimal color of the bar that shows the current command when the user selects a typeahead command. (ex: \"#FFFFFF\") bar_xpad number The horizontal padding of the bar that shows the current command. bar_ypad number The vertical padding of the bar that shows the current command. blur_flag bool If true, the console will have a blur effect behind. blur_amount number The amount of the blur effect. (From 0 to 1 recommended.) screenfill_flag bool If true, the console will fill the screen with a color. screenfill_color string The hexadecimal color of the screenfill. (ex: \"#FFFFFF\") screenfill_alpha number The alpha of the screenfill. typeahead_flag bool If true, the console will show a typeahead list of commands. typeahead_max_elements number The maximum number of elements that will be shown in the typeahead list. suggestions_flag bool If true, the console will show a list of suggestions when the user start typing a command. nav_scroll_speed number The speed of the navigation in the console. (from 0.1 to 2 recommended)","title":"Create your own theme"},{"location":"customize/#change-console-styles-without-themes","text":"This console is very customizable using themes, but if you don't want to use themes, you can change the style of the console by changing the values of the variables in the create event of the __ezConsole__ object. The following variables are responsible for the style of the console: Variable Description console_width The width in pixels of the console. console_height The height in pixels of the console. console_bg_color The background color of the console. console_bg_alpha The background alpha of the console. console_text_font The font of the text in the console. console_text_font_xoff The x offset of the text in the console. console_text_font_yoff The y offset of the text in the console. console_text_alpha The alpha of the text in the console. console_text_blink_char The character that will blink when the console is waiting for input. console_bar_height The height in pixels of the bar that shows the current command. console_bar_color The color of the bar that shows the current command. console_bar_color_highlight The color of the bar that shows the current command when the user selects a typeahead command. console_bar_max_chars The maximum number of characters that can be shown in the bar. console_log_xpad The horizontal padding of the log. console_log_ypad The vertical padding of the log. console_blur_flag If true, the console will have a blur effect behind. console_blur_amount The amount of blur that will be applied to the game behind the console. console_screenfill_flag If true, the console will fill the screen with a color. console_screenfill_color The color of the screenfill. console_screenfill_alpha The alpha of the screenfill. console_typeahead_flag If true, the console will show a typeahead list of commands. console_typeahead_elements_max The maximum number of elements that will be shown in the typeahead list. console_suggestions_flag If true, the console will show a list of suggestions when the user start typing a command. I do not recommend changing style variables that are not listed here, because they are used by the console to work properly.","title":"Change console styles (Without Themes)"},{"location":"customize/#change-key-bindings","text":"In the create event of the __ezConsole__ object you can change the key bindings of the console by changing the values of the variables: Variable Description Default console_key_toggle The key that will toggle the console visible. vk_f1 console_key_nav_up The key that will move the cursor up in the command history or the typeahead list of commands. vk_up console_key_nav_down The key that will move the cursor down in the command history or the typeahead list of commands. vk_down console_key_nav_left The key that will move the cursor left in the command. vk_left console_key_nav_right The key that will move the cursor right in the command. vk_right The default key binding to autocomplete suggestions or typeahead commands is vk_tab and cannot be changed easily. Sorry :(","title":"Change key bindings"},{"location":"customize/#change-consoles-behavior","text":"In the create event of the __ezConsole__ object you can change the behavior of the console at almost any event by changing the values of the variables: Variable Description console_callback_on_open A function that will be called when the console is opened. console_callback_on_close A function that will be called when the console is closed. console_callback_on_log A function that will be called when a log is added to the console. console_callback_on_destroy A function that will be called when the console is destroyed. console_callback_on_game_end A function that will be called when the game ends.","title":"Change console's behavior"},{"location":"started/","text":"Installation Download the latest release from the releases page . (Be sure you are downloading the correct version for your GameMaker version. Check the compatible versions in this table.) (A) Import the contents into your project just draggin the GM-EzConsole-[version].yymps file into it. (B) You can also import it into your project using the top toolbar on Tools > Import Local Package > Select the GM-EzConsole-[version].yymps file. A window should appear asking you to select the resources you want to import. Select the GML-EzConsole folder, press Add All , and then click Import . You can now use the extension in your project. Setting up on a new project To setup the extension on a new project, you shouldn't need to do anything special. Just import the extension and you're good to go. :) Setting up on an existing project IMPORTANT NOTE: If you already installed this extension before and have custom commands callbacks or functions on the ezConsole_custom_commands script, you should not import the ezConsole_custom_commands on step 1. If you want to set up the extension on an existing project, you can do so by following these steps: Import the extension into your project. (See Installation ) Make sure you have the GM-EzConsole folder in your project. Make sure you have the __EzConsole__ object in your EzConsole\\Objects folder. Make sure you have the GM-EzConsole folder, and the following files: default_commands.json , default-dark.skin and default-light.skin files in your Included Files folder (or try to find it on your datafiles project folder). Place the __EzConsole__ object in the first room of your project. Run your project and press F1 to open the console. If you can see a console window, you're good to go. Create your first command On this section, you will learn how to create your first command. This command will be called trace and will print a message on the console. To create your first command, you can do so by following these steps: Open the ezConsole_custom_commands script file in your project. Create a new function inside this file with the following name console_command_trace . /// @func console_command_trace(args) /// @param {array} args function console_command_trace(_args) { // Your code here } As you can see, the function name must start with console_command_ followed by the command name. In this case, the command name is trace . Inside the function, you should start by creating 4 variables, _command , _params_len , _min_params and _max_params , the first one will store the command name to be called and the second one will store the length of the _args array. var _command = \"trace\"; var _params_len = array_length(_args); var _min_params = 1; var _max_params = 99; // You can set this to the maximum number of params you want Now, you should check if the _params_len is less than _min_params and grater than _max_params , if it is, you should print a message on the console telling the user that the command was called with the wrong number of params. We can use the console_check_params_count function to do so. // Check for the correct number of params if (console_check_params_count(_command, _params_len, _min_params, _max_params)) { // Your code here } Now, we should check the \"happy path\", if the value returned from console_check_params_count is true , we should print the message on the console. Note that we do not need to convert _args[i] since params is an array of string, so we can sum them directly. var _message = \"\"; for (var i = 0; i < _params_len; i++) { _message += _args[i]; if (i < _params_len - 1) { _message += \" \"; } } console_write_log(_message, EZ_CONSOLE_MSG_TYPE.INFO); show_debug_message(_message); Now that the function is created, we should add it to the console_commands array. To do so, we should add a new element to the array with the following structure: { name: \"trace\", short: \"tr\", desc: \"Prints a message on the console\", args: [\"message\"], args_req: [true], args_desc: [\"Message to be printed on the console\"], callback: \"console_command_trace\", } Finally, we add it to the console_commands array by declaring it at the end of the ezConsole_custom_commands file (and outside of the function) like this: console_add_command({ name: \"trace\", short: \"tr\", desc: \"Prints a message on the console\", args: [\"message\"], args_req: [true], args_desc: [\"Message to be printed on the console\"], callback: \"console_command_trace\", }); Now, you can run your project and type trace on the console, followed by a message. If everything went well, you should see the message on the GameMaker's console and on the EzConsole. The final code should look like this: /// @func console_command_trace(args) /// @param {array} args function console_command_trace(_args) { var _command = \"trace\"; var _params_len = array_length(_args); var _min_params = 1; var _max_params = 99; // You can set this to the maximum number of params you want // Check for the correct number of params if (console_check_params_count(_command, _params_len, _min_params, _max_params)) { var _message = \"\"; for (var i = 0; i < _params_len; i++) { _message += _args[i]; if (i < _params_len - 1) { _message += \" \"; } } console_write_log(_message, EZ_CONSOLE_MSG_TYPE.INFO); show_debug_message(_message); } } console_add_command({ name: \"trace\", short: \"tr\", desc: \"Prints a message on the console\", args: [\"message\"], args_req: [true], args_desc: [\"Message to be printed on the console\"], callback: \"console_command_trace\", }); You can also skip the steps 7 & 8 by adding the commands via file. You can see how to do that on the next section.","title":"Getting Started"},{"location":"started/#installation","text":"Download the latest release from the releases page . (Be sure you are downloading the correct version for your GameMaker version. Check the compatible versions in this table.) (A) Import the contents into your project just draggin the GM-EzConsole-[version].yymps file into it. (B) You can also import it into your project using the top toolbar on Tools > Import Local Package > Select the GM-EzConsole-[version].yymps file. A window should appear asking you to select the resources you want to import. Select the GML-EzConsole folder, press Add All , and then click Import . You can now use the extension in your project.","title":"Installation"},{"location":"started/#setting-up-on-a-new-project","text":"To setup the extension on a new project, you shouldn't need to do anything special. Just import the extension and you're good to go. :)","title":"Setting up on a new project"},{"location":"started/#setting-up-on-an-existing-project","text":"IMPORTANT NOTE: If you already installed this extension before and have custom commands callbacks or functions on the ezConsole_custom_commands script, you should not import the ezConsole_custom_commands on step 1. If you want to set up the extension on an existing project, you can do so by following these steps: Import the extension into your project. (See Installation ) Make sure you have the GM-EzConsole folder in your project. Make sure you have the __EzConsole__ object in your EzConsole\\Objects folder. Make sure you have the GM-EzConsole folder, and the following files: default_commands.json , default-dark.skin and default-light.skin files in your Included Files folder (or try to find it on your datafiles project folder). Place the __EzConsole__ object in the first room of your project. Run your project and press F1 to open the console. If you can see a console window, you're good to go.","title":"Setting up on an existing project"},{"location":"started/#create-your-first-command","text":"On this section, you will learn how to create your first command. This command will be called trace and will print a message on the console. To create your first command, you can do so by following these steps: Open the ezConsole_custom_commands script file in your project. Create a new function inside this file with the following name console_command_trace . /// @func console_command_trace(args) /// @param {array} args function console_command_trace(_args) { // Your code here } As you can see, the function name must start with console_command_ followed by the command name. In this case, the command name is trace . Inside the function, you should start by creating 4 variables, _command , _params_len , _min_params and _max_params , the first one will store the command name to be called and the second one will store the length of the _args array. var _command = \"trace\"; var _params_len = array_length(_args); var _min_params = 1; var _max_params = 99; // You can set this to the maximum number of params you want Now, you should check if the _params_len is less than _min_params and grater than _max_params , if it is, you should print a message on the console telling the user that the command was called with the wrong number of params. We can use the console_check_params_count function to do so. // Check for the correct number of params if (console_check_params_count(_command, _params_len, _min_params, _max_params)) { // Your code here } Now, we should check the \"happy path\", if the value returned from console_check_params_count is true , we should print the message on the console. Note that we do not need to convert _args[i] since params is an array of string, so we can sum them directly. var _message = \"\"; for (var i = 0; i < _params_len; i++) { _message += _args[i]; if (i < _params_len - 1) { _message += \" \"; } } console_write_log(_message, EZ_CONSOLE_MSG_TYPE.INFO); show_debug_message(_message); Now that the function is created, we should add it to the console_commands array. To do so, we should add a new element to the array with the following structure: { name: \"trace\", short: \"tr\", desc: \"Prints a message on the console\", args: [\"message\"], args_req: [true], args_desc: [\"Message to be printed on the console\"], callback: \"console_command_trace\", } Finally, we add it to the console_commands array by declaring it at the end of the ezConsole_custom_commands file (and outside of the function) like this: console_add_command({ name: \"trace\", short: \"tr\", desc: \"Prints a message on the console\", args: [\"message\"], args_req: [true], args_desc: [\"Message to be printed on the console\"], callback: \"console_command_trace\", }); Now, you can run your project and type trace on the console, followed by a message. If everything went well, you should see the message on the GameMaker's console and on the EzConsole. The final code should look like this: /// @func console_command_trace(args) /// @param {array} args function console_command_trace(_args) { var _command = \"trace\"; var _params_len = array_length(_args); var _min_params = 1; var _max_params = 99; // You can set this to the maximum number of params you want // Check for the correct number of params if (console_check_params_count(_command, _params_len, _min_params, _max_params)) { var _message = \"\"; for (var i = 0; i < _params_len; i++) { _message += _args[i]; if (i < _params_len - 1) { _message += \" \"; } } console_write_log(_message, EZ_CONSOLE_MSG_TYPE.INFO); show_debug_message(_message); } } console_add_command({ name: \"trace\", short: \"tr\", desc: \"Prints a message on the console\", args: [\"message\"], args_req: [true], args_desc: [\"Message to be printed on the console\"], callback: \"console_command_trace\", }); You can also skip the steps 7 & 8 by adding the commands via file. You can see how to do that on the next section.","title":"Create your first command"}]}